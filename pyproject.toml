[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "super-creativity-strands"
version = "1.0.0"
description = "Multi-agent creative ideation system with graph-based flow, memory persistence, chaos generation, and independent evaluation"
readme = "docs/README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Creativity Agent Team"}
]
keywords = [
    "creativity",
    "ai",
    "multi-agent",
    "ideation",
    "strands",
    "graph-based",
    "llm",
    "aws-bedrock"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Internet",
]

dependencies = [
    # Core AWS Strands Framework (requires Python 3.10+)
    "strands-agents>=0.1.0",
    "strands-agents-tools>=0.1.0",
    
    # AWS SDK
    "boto3>=1.35.0",
    
    # Data validation and models
    "pydantic>=2.0.0",
    
    # Template engine for sophisticated prompt construction
    "jinja2>=3.0.0",
    
    # Web search for chaos and research
    "duckduckgo-search>=6.0.0",
    "ddgs>=9.0.0",
    
    # Observability and metrics
    "elasticsearch>=8.0.0",
    
    # Testing and development tools (needed for runtime)
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=1.0.0",
    "coverage>=7.0.0",
    "sentence-transformers>=2.0.0",
]

[project.optional-dependencies]
# Semantic discovery backends - install one or more for better quality
semantic = [
    "scikit-learn>=1.0.0",
    "torch>=2.0.0",
    "numpy>=1.24.0",
]
gensim = [
    "gensim>=4.3.0",
]
nltk = [
    "nltk>=3.8.0",
]
# Install all semantic backends
all-semantic = [
    "sentence-transformers>=2.0.0",
    "scikit-learn>=1.0.0",
    "torch>=2.0.0",
    "numpy>=1.24.0",
    "gensim>=4.3.0",
    "nltk>=3.8.0",
]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=1.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "coverage>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/super-creativity-strands"
Documentation = "https://github.com/yourusername/super-creativity-strands/tree/main/docs"
Repository = "https://github.com/yourusername/super-creativity-strands"
Issues = "https://github.com/yourusername/super-creativity-strands/issues"

[project.scripts]
# Optional: make the CLI available as a command
# super-creativity = "creativity_agent.main:main"

[tool.setuptools]
packages = ["creativity_agent"]
include-package-data = true

[tool.setuptools.package-data]
creativity_agent = [
    "prompts/*.txt",
    "prompts_templates/*.j2",
    "flow_config.json",
    ".env.example",
]

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312", "py313"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | \.eggs
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_mode = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=creativity_agent"

[tool.coverage.run]
source = ["creativity_agent"]
omit = [
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
